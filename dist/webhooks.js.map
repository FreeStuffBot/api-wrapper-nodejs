{
  "version": 3,
  "sources": ["../src/webhooks.ts"],
  "sourcesContent": [
    "import { getCompatibility, getUa } from './const' with { type: 'macro' };\n\nimport type { Request, Response, NextFunction } from 'express';\nimport type { KeyObject } from 'node:crypto';\nimport * as express from 'express';\nimport { newSignedMessageVerifier, type VerifierOptions } from './verifier';\nimport { emit } from './events';\nimport { parseEvent } from './parser';\n\n\n/** Add freestuff webhooks to any existing express app */\nexport function createExpressHandler(pubkey: string | KeyObject, options?: Partial<Omit<VerifierOptions, 'publicKey'>>) {\n  const verifier = newSignedMessageVerifier({\n    publicKey: pubkey,\n    ...(options ?? {}),\n  });\n\n  const rawParser = express.raw({ type: '*/*' });\n\n  return (req: Request, res: Response, next: NextFunction) => {\n    rawParser(req, res, (err) => {\n      res.setHeader('X-Set-Compatibility-Date', getCompatibility());\n      res.setHeader('X-Client-Library', getUa());\n      \n      if (err) {\n        return void res.status(500).send('Error parsing request body');\n      }\n\n      if (!req.body) {\n        return void res.status(400).send('Missing body');\n      }\n\n      if (!Buffer.isBuffer(req.body)) {\n        console.warn('Webhook body is not a Buffer! Please move any mentions of `use(express.json())` after the webhook handler.');\n        return void res.status(500).send('Invalid server configuration');\n      }\n\n      const result = verifier({\n        data: req.body,\n        signature: String(req.headers['webhook-id']),\n        messageId: String(req.headers['webhook-signature']),\n        timestamp: String(req.headers['webhook-timestamp']),\n      });\n\n      if (!result.success) {\n        return void res.status(400).send(`Verification failed: ${result.status}`);\n      }\n\n      const compatibilityDate = req.headers['x-compatibility-date'];\n      if (compatibilityDate !== getCompatibility()) {\n        return void res.status(400).send('Incompatible compatibility date');\n      }\n\n      res.status(204).end();\n\n      if (!result.payloadJson.type || !String(result.payloadJson.type).startsWith('fsb:event:')) {\n        console.warn(`Received a correctly signed but unsupported payload.`);\n        console.log(result.payloadJson);\n        return;\n      }\n\n      emit(parseEvent(result.payloadJson))\n    });\n  };\n}\n\n/** Let us create an express server for you and already register everything you need. */\nexport function createExpressServer(options: VerifierOptions & { port?: number, route?: string }) {\n  const handler = createExpressHandler(options.publicKey, options);\n  const app = express();\n  if (options.route) {\n    app.use(options.route, handler);\n  } else {\n    app.use(handler);\n  }\n  const { promise, resolve } = Promise.withResolvers<{ app: typeof app, port: number }>();\n  const port = options.port ?? 3000;\n  app.listen(port, () => resolve({ app, port }));\n  return promise;\n}\n"
  ],
  "mappings": ";;;;;;;;;;;;AAIA;AAOO,SAAS,oBAAoB,CAAC,QAA4B,SAAuD;AAAA,EACtH,MAAM,WAAW,yBAAyB;AAAA,IACxC,WAAW;AAAA,OACP,WAAW,CAAC;AAAA,EAClB,CAAC;AAAA,EAED,MAAM,YAAoB,YAAI,EAAE,MAAM,MAAM,CAAC;AAAA,EAE7C,OAAO,CAAC,KAAc,KAAe,SAAuB;AAAA,IAC1D,UAAU,KAAK,KAAK,CAAC,QAAQ;AAAA,MAC3B,IAAI,UAAU,4BAA4B,YAAkB;AAAA,MAC5D,IAAI,UAAU,oBAAoB,yEAAO;AAAA,MAEzC,IAAI,KAAK;AAAA,QACP,OAAO,KAAK,IAAI,OAAO,GAAG,EAAE,KAAK,4BAA4B;AAAA,MAC/D;AAAA,MAEA,KAAK,IAAI,MAAM;AAAA,QACb,OAAO,KAAK,IAAI,OAAO,GAAG,EAAE,KAAK,cAAc;AAAA,MACjD;AAAA,MAEA,KAAK,OAAO,SAAS,IAAI,IAAI,GAAG;AAAA,QAC9B,QAAQ,KAAK,4GAA4G;AAAA,QACzH,OAAO,KAAK,IAAI,OAAO,GAAG,EAAE,KAAK,8BAA8B;AAAA,MACjE;AAAA,MAEA,MAAM,SAAS,SAAS;AAAA,QACtB,MAAM,IAAI;AAAA,QACV,WAAW,OAAO,IAAI,QAAQ,aAAa;AAAA,QAC3C,WAAW,OAAO,IAAI,QAAQ,oBAAoB;AAAA,QAClD,WAAW,OAAO,IAAI,QAAQ,oBAAoB;AAAA,MACpD,CAAC;AAAA,MAED,KAAK,OAAO,SAAS;AAAA,QACnB,OAAO,KAAK,IAAI,OAAO,GAAG,EAAE,KAAK,wBAAwB,OAAO,QAAQ;AAAA,MAC1E;AAAA,MAEA,MAAM,oBAAoB,IAAI,QAAQ;AAAA,MACtC,IAAI,sBAAsB,cAAoB;AAAA,QAC5C,OAAO,KAAK,IAAI,OAAO,GAAG,EAAE,KAAK,iCAAiC;AAAA,MACpE;AAAA,MAEA,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,MAEpB,KAAK,OAAO,YAAY,SAAS,OAAO,OAAO,YAAY,IAAI,EAAE,WAAW,YAAY,GAAG;AAAA,QACzF,QAAQ,KAAK,sDAAsD;AAAA,QACnE,QAAQ,IAAI,OAAO,WAAW;AAAA,QAC9B;AAAA,MACF;AAAA,MAEA,KAAK,WAAW,OAAO,WAAW,CAAC;AAAA,KACpC;AAAA;AAAA;AAKE,SAAS,mBAAmB,CAAC,SAA8D;AAAA,EAChG,MAAM,UAAU,qBAAqB,QAAQ,WAAW,OAAO;AAAA,EAC/D,MAAM,MAAM,QAAQ;AAAA,EACpB,IAAI,QAAQ,OAAO;AAAA,IACjB,IAAI,IAAI,QAAQ,OAAO,OAAO;AAAA,EAChC,EAAO;AAAA,IACL,IAAI,IAAI,OAAO;AAAA;AAAA,EAEjB,QAAQ,SAAS,YAAY,QAAQ,cAAiD;AAAA,EACtF,MAAM,OAAO,QAAQ,QAAQ;AAAA,EAC7B,IAAI,OAAO,MAAM,MAAM,QAAQ,EAAE,KAAK,KAAK,CAAC,CAAC;AAAA,EAC7C,OAAO;AAAA;",
  "debugId": "4CB0E6CE8B3372A464756E2164756E21",
  "names": []
}