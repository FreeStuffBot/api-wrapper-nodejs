{
  "version": 3,
  "sources": ["../src/verifier.ts"],
  "sourcesContent": [
    "import { createPublicKey, verify, type KeyObject } from 'node:crypto';\n\n\nexport type VerifierOptions = {\n  /** the public key to verify the message payload against */\n  publicKey: string | KeyObject\n  /** controls the timestamp check and for how long messageIds are stored */\n  maxMessageAge?: number\n  /** skip storing and comparing messageIds for replay attacks, not recommended */\n  skipDuplicateCheck?: boolean\n  /** skip checking the timestamp for dates in the past, not recommended */\n  skipTimestampCheck?: boolean\n};\n\nexport type VerificationInput = {\n  /** the raw message body as a buffer (http body, **not parsed**) */\n  data: Buffer,\n  /** the payload signature (webhook-signature header) */\n  signature: string,\n  /** the message id (webhook-id header) */\n  messageId: string,\n  /** the string timestamp of this message's delivery (webhook-timestamp header) */\n  timestamp: string,\n};\n\nexport type VerificationStatus\n  /** the input was verified and is valid */\n  = 'valid'\n  /** some of the input parameters are missing */\n  | 'missing-parameters'\n  /** the signature was not matching the input */\n  | 'invalid-signature'\n  /** the timestamp was invalid, e.g. too old */\n  | 'invalid-timestamp'\n  /** the signature was created using an unsupported algorithm */\n  | 'unsupported-algorithm'\n  /** this message has already been received before */\n  | 'duplicate';\n\nexport type VerificationOutput = {\n  success: true\n  status: 'valid'\n  payloadJson: Record<string, unknown> | null\n  payloadRaw: Buffer\n} | {\n  success: false\n  status: Omit<VerificationStatus, 'valid'>\n  payloadJson: null\n  payloadRaw: null\n};\n\nexport type SignedMessageVerifier = (input: VerificationInput) => VerificationOutput;\n\nexport function newSignedMessageVerifier(options: VerifierOptions) {\n  const key = (typeof options.publicKey === 'string')\n    ? createPublicKey({\n      key: Buffer.from(options.publicKey, 'base64'),\n      format: 'der',\n      type: 'spki',\n    })\n    : options.publicKey;\n\n  const maxMessageAge = options.maxMessageAge ?? 5 * 60 * 1000; // default to 5 minutes\n  const skipDuplicateCheck = options.skipDuplicateCheck ?? false;\n  const skipTimestampCheck = options.skipTimestampCheck ?? false;\n\n  const storedMessageIds: Set<string> = new Set();\n  const deleteMessageIdsAfter = maxMessageAge + 1 * 60 * 1000; // keep for 1 minute longer to be sure\n\n  const isDateOlderThanMaxAge = (date: Date): boolean => {\n    const now = new Date();\n    return (now.getTime() - date.getTime()) > maxMessageAge;\n  };\n\n  return (input: VerificationInput): VerificationOutput => {\n    if (!input.data || !input.signature || !input.messageId || !input.timestamp) {\n      return {\n        success: false,\n        status: 'missing-parameters',\n        payloadJson: null,\n        payloadRaw: null,\n      };\n    }\n\n    const asDate = new Date(input.timestamp);\n    if (!skipTimestampCheck && (isNaN(asDate.getTime()) || isDateOlderThanMaxAge(asDate))) {\n      return {\n        success: false,\n        status: 'invalid-timestamp',\n        payloadJson: null,\n        payloadRaw: null,\n      };\n    }\n\n    if (!skipDuplicateCheck && storedMessageIds.has(input.messageId)) {\n      return {\n        success: false,\n        status: 'duplicate',\n        payloadJson: null,\n        payloadRaw: null,\n      };\n    }\n\n    if (skipDuplicateCheck) {\n      storedMessageIds.add(input.messageId);\n      setTimeout(() => {\n        storedMessageIds.delete(input.messageId);\n      }, deleteMessageIdsAfter);\n    }\n\n    const [version, sigB64] = String(input.signature).split(',');\n    if (version !== 'v1a') {\n      return {\n        success: false,\n        status: 'unsupported-algorithm',\n        payloadJson: null,\n        payloadRaw: null,\n      };\n    }\n\n    const sigBuff = Buffer.from(sigB64!, 'base64');\n    const contentBuff = Buffer.from(`$Sinput.messageId}.${input.timestamp}.${input.data.toString()}`, 'utf8');\n\n    const valid = verify(null, new Uint8Array(contentBuff), key, sigBuff);\n    if (!valid) {\n      return {\n        success: false,\n        status: 'invalid-signature',\n        payloadJson: null,\n        payloadRaw: null,\n      };\n    }\n\n    return {\n      success: true,\n      status: 'valid',\n      payloadJson: input.data.toString()\n        ? JSON.parse(input.data.toString())\n        : null,\n      payloadRaw: input.data,\n    }\n  };\n}\n"
  ],
  "mappings": ";AAAA;AAqDO,SAAS,wBAAwB,CAAC,SAA0B;AAAA,EACjE,MAAM,MAAO,OAAO,QAAQ,cAAc,WACtC,gBAAgB;AAAA,IAChB,KAAK,OAAO,KAAK,QAAQ,WAAW,QAAQ;AAAA,IAC5C,QAAQ;AAAA,IACR,MAAM;AAAA,EACR,CAAC,IACC,QAAQ;AAAA,EAEZ,MAAM,gBAAgB,QAAQ,iBAAiB,IAAI,KAAK;AAAA,EACxD,MAAM,qBAAqB,QAAQ,sBAAsB;AAAA,EACzD,MAAM,qBAAqB,QAAQ,sBAAsB;AAAA,EAEzD,MAAM,mBAAgC,IAAI;AAAA,EAC1C,MAAM,wBAAwB,gBAAgB,IAAI,KAAK;AAAA,EAEvD,MAAM,wBAAwB,CAAC,SAAwB;AAAA,IACrD,MAAM,MAAM,IAAI;AAAA,IAChB,OAAQ,IAAI,QAAQ,IAAI,KAAK,QAAQ,IAAK;AAAA;AAAA,EAG5C,OAAO,CAAC,UAAiD;AAAA,IACvD,KAAK,MAAM,SAAS,MAAM,cAAc,MAAM,cAAc,MAAM,WAAW;AAAA,MAC3E,OAAO;AAAA,QACL,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,MAAM,SAAS,IAAI,KAAK,MAAM,SAAS;AAAA,IACvC,KAAK,uBAAuB,MAAM,OAAO,QAAQ,CAAC,KAAK,sBAAsB,MAAM,IAAI;AAAA,MACrF,OAAO;AAAA,QACL,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,KAAK,sBAAsB,iBAAiB,IAAI,MAAM,SAAS,GAAG;AAAA,MAChE,OAAO;AAAA,QACL,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,IAAI,oBAAoB;AAAA,MACtB,iBAAiB,IAAI,MAAM,SAAS;AAAA,MACpC,WAAW,MAAM;AAAA,QACf,iBAAiB,OAAO,MAAM,SAAS;AAAA,SACtC,qBAAqB;AAAA,IAC1B;AAAA,IAEA,OAAO,SAAS,UAAU,OAAO,MAAM,SAAS,EAAE,MAAM,GAAG;AAAA,IAC3D,IAAI,YAAY,OAAO;AAAA,MACrB,OAAO;AAAA,QACL,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,MAAM,UAAU,OAAO,KAAK,QAAS,QAAQ;AAAA,IAC7C,MAAM,cAAc,OAAO,KAAK,sBAAsB,MAAM,aAAa,MAAM,KAAK,SAAS,KAAK,MAAM;AAAA,IAExG,MAAM,QAAQ,OAAO,MAAM,IAAI,WAAW,WAAW,GAAG,KAAK,OAAO;AAAA,IACpE,KAAK,OAAO;AAAA,MACV,OAAO;AAAA,QACL,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IAEA,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,aAAa,MAAM,KAAK,SAAS,IAC7B,KAAK,MAAM,MAAM,KAAK,SAAS,CAAC,IAChC;AAAA,MACJ,YAAY,MAAM;AAAA,IACpB;AAAA;AAAA;",
  "debugId": "54118ED6998CCCC364756E2164756E21",
  "names": []
}