{
  "version": 3,
  "sources": ["../src/parser.ts"],
  "sourcesContent": [
    "import { createBitfield } from './bitfield'\nimport type { FsbEvent, Product, ResolvedAnnouncement } from './types';\n\n\nconst productFlags = {\n  TRASH: 1<<0,\n  THIRDPARTY: 1<<1,\n  PERMANENT: 1<<2,\n  STAFF_PICK: 1<<3,\n  FIRSTPARTY_EXCLUSIVE: 1<<4,\n};\n\nconst productUrlFlags = {\n  ORIGINAL: 1<<0,\n  PROXIED: 1<<1,\n  TRACKING: 1<<2,\n  OPENS_IN_BROWSER: 1<<3,\n  OPENS_IN_CLIENT: 1<<4,\n};\n\nconst productImageFlags = {\n  PROXIED: 1<<0,\n  AR_WIDE: 1<<1,\n  AR_SQUARE: 1<<2,\n  AR_TALL: 1<<3,\n  TP_PROMO: 1<<4,\n  TP_LOGO: 1<<5,\n  TP_SHOWCASE: 1<<6,\n  TP_OTHER: 1<<7,\n  FT_WATERMARK: 1<<8,\n  FT_TAGS: 1<<9,\n};\n\nfunction parseProduct(product: Record<string, unknown>): Product {\n  product.until = product.until\n    ? new Date(product.until as string)\n    : null;\n  product.flags = createBitfield(product.flags as number, productFlags);\n  (product.urls as Array<Record<string, unknown>>).forEach(url => url.flags = createBitfield(url.flags as number, productUrlFlags));\n  (product.images as Array<Record<string, unknown>>).forEach(image => image.flags = createBitfield(image.flags as number, productImageFlags));\n  return product as Product;\n}\n\nfunction parseResolvedAnnouncement(announcement: Record<string, unknown>): ResolvedAnnouncement {\n  announcement.resolvedProducts = (announcement.resolvedProducts as Array<Record<string, unknown>>).map(parseProduct);\n  return announcement as ResolvedAnnouncement;\n}\n\nexport function parseEvent(event: Record<string, unknown>): FsbEvent {\n  if (event.type as string === 'fsb:event:product_updated') {\n    event.data = parseProduct(event.data as Record<string, unknown>);\n  } else if (event.type as string === 'fsb:event:announcement_created') {\n    event.data = parseResolvedAnnouncement(event.data as Record<string, unknown>);\n  }\n  event.timestamp = new Date(event.timestamp as string);\n  return event as FsbEvent;\n}\n"
  ],
  "mappings": ";;;;;AAIA,IAAM,eAAe;AAAA,EACnB,OAAO,KAAG;AAAA,EACV,YAAY,KAAG;AAAA,EACf,WAAW,KAAG;AAAA,EACd,YAAY,KAAG;AAAA,EACf,sBAAsB,KAAG;AAC3B;AAEA,IAAM,kBAAkB;AAAA,EACtB,UAAU,KAAG;AAAA,EACb,SAAS,KAAG;AAAA,EACZ,UAAU,KAAG;AAAA,EACb,kBAAkB,KAAG;AAAA,EACrB,iBAAiB,KAAG;AACtB;AAEA,IAAM,oBAAoB;AAAA,EACxB,SAAS,KAAG;AAAA,EACZ,SAAS,KAAG;AAAA,EACZ,WAAW,KAAG;AAAA,EACd,SAAS,KAAG;AAAA,EACZ,UAAU,KAAG;AAAA,EACb,SAAS,KAAG;AAAA,EACZ,aAAa,KAAG;AAAA,EAChB,UAAU,KAAG;AAAA,EACb,cAAc,KAAG;AAAA,EACjB,SAAS,KAAG;AACd;AAEA,SAAS,YAAY,CAAC,SAA2C;AAAA,EAC/D,QAAQ,QAAQ,QAAQ,QACpB,IAAI,KAAK,QAAQ,KAAe,IAChC;AAAA,EACJ,QAAQ,QAAQ,eAAe,QAAQ,OAAiB,YAAY;AAAA,EACnE,QAAQ,KAAwC,QAAQ,SAAO,IAAI,QAAQ,eAAe,IAAI,OAAiB,eAAe,CAAC;AAAA,EAC/H,QAAQ,OAA0C,QAAQ,WAAS,MAAM,QAAQ,eAAe,MAAM,OAAiB,iBAAiB,CAAC;AAAA,EAC1I,OAAO;AAAA;AAGT,SAAS,yBAAyB,CAAC,cAA6D;AAAA,EAC9F,aAAa,mBAAoB,aAAa,iBAAoD,IAAI,YAAY;AAAA,EAClH,OAAO;AAAA;AAGF,SAAS,UAAU,CAAC,OAA0C;AAAA,EACnE,IAAI,MAAM,SAAmB,6BAA6B;AAAA,IACxD,MAAM,OAAO,aAAa,MAAM,IAA+B;AAAA,EACjE,EAAO,SAAI,MAAM,SAAmB,kCAAkC;AAAA,IACpE,MAAM,OAAO,0BAA0B,MAAM,IAA+B;AAAA,EAC9E;AAAA,EACA,MAAM,YAAY,IAAI,KAAK,MAAM,SAAmB;AAAA,EACpD,OAAO;AAAA;",
  "debugId": "2BA98D3550277E8664756E2164756E21",
  "names": []
}